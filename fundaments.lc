zero := fn f => fn a => a;

true := fn t => fn e => t;
false := fn t => fn e => e;
if := fn c => fn t => fn e => c t e;
is_zero := fn n => n (fn f => false) true;

(* this shouldn't be working? *)
(* let := fn v => fn e => fn b => (fn v => b) e; *)
pair := fn t => fn e => fn c => c t e;
fst := fn p => p true;
snd := fn p => p false;

succ := fn n => fn f => fn a => f (n f a);

plus := fn n => fn m => m succ n;
times := fn n => fn m => fn f => m (n f);

(* power *)
power := fn b => fn p => p (times b) (succ zero);

(* pred *)
pred := fn n => fst(n (fn p => (pair (snd p) (succ (snd p)))) (pair zero zero));

(* minus *)
minus := fn n => fn m => m pred n;

(* less *)
less := fn n => fn m => is_zero (minus n (pred m));

(* and *)
and := fn x => fn y => x (y true false) false;

(* not *)
not := fn c => c false true;

(* many equal *)
(* equal := fn n => fn m => and (is_zero (minus n m)) (not (less n m)); *)
(* equal := fn n => fn m => and (less (pred n) m) (less n (pred m)); *)
equal := fn n => fn m => and (not (less n m)) (not (less m n));

(* fibbit *)
fibbit := fn n => fst (n (fn p => (pair (snd p) (plus (fst p) (snd p)))) (pair zero (succ zero)));

(* div2 *)
div2 := fn n => fst (n (fn p => (pair (snd p) (succ (fst p)))) (pair zero zero));

(* Y combinator *)
Y := fn g => (fn f => g (f f)) (fn f => g (f f));

(* fibrec helper *)
fibhelp := fn c => fn n => if (is_zero n) zero (if (equal n (succ zero)) (succ zero) (plus (c (pred n)) (c (pred (pred n)))));

(* fibrec *)
fibrec := fn n => Y fibhelp n;

(* gcd helper *)
gcdhelp := fn c => fn a => fn b => if (equal a b) a (if (less a b) (c a (minus b a)) (c (minus a b) b));

(* gcd *)
gcd := fn a => fn b => Y gcdhelp a b;
